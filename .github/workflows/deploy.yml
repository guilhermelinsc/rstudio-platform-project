name: CI/CD for RStudio Platform Project

on:
  pull_request:
    branches:
      - main

jobs:
  docker-build-and-push:
    name: Build, Push, Test & Scan on Dockerfile Change
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check if Dockerfile was modified
        id: dockerfile-check
        run: |
          git fetch origin main
          if git diff --name-only origin/main...HEAD | grep -q '^docker/Dockerfile$'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Exit if Dockerfile was not changed
        if: steps.dockerfile-check.outputs.changed == 'false'
        run: |
          echo "No Dockerfile changes detected. Skipping Docker build and deploy steps."
          exit 0

      - name: Determine version bump type from commit message (Conventional Commits)
        id: bump_type
        run: |
            bump_type="patch"
            commit_msg="${{ github.event.head_commit.message }}"
        
            if [[ "$commit_msg" == *"BREAKING CHANGE"* ]]; then
              bump_type="major"
            elif [[ "$commit_msg" == feat* ]]; then
              bump_type="minor"
            elif [[ "$commit_msg" == fix* ]]; then
              bump_type="patch"
            fi
        
            echo "Using commit message: $commit_msg"
            echo "Determined bump type: $bump_type"
            echo "bump_type=$bump_type" >> $GITHUB_ENV
        

      - name: Auto-bump version
        run: |
          current=$(cat VERSION | sed 's/^v//')
          major=$(echo $current | cut -d. -f1)
          minor=$(echo $current | cut -d. -f2)
          patch=$(echo $current | cut -d. -f3)
      
          if [ "${{ env.bump_type }}" == "major" ]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [ "${{ env.bump_type }}" == "minor" ]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi
      
          next="v$major.$minor.$patch"
          echo $next > VERSION
      
          # Commit bump on a new branch and push
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git checkout -b version-bump/$next
          git add VERSION
          git commit -m "ci: bump version to $next"
          git push origin version-bump/$next
   

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Read version from VERSION file
        id: version
        run: |
          echo "tag=$(cat VERSION)" >> $GITHUB_OUTPUT
        

      - name: Build and push Docker image
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
          docker build -t guilhermelinsc/rstudio-ms:${{ steps.version.outputs.tag }} -f docker/Dockerfile .
          docker push guilhermelinsc/rstudio-ms:${{ steps.version.outputs.tag }}
        

      - name: Deploy to GKE for testing
        run: |
          kubectl apply -f deployment.yml
          kubectl rollout status deployment/rstudio-deployment -n rstudio

      - name: HTTP health check
        run: |
          app_url=$(kubectl get svc rstudio-deployment -n rstudio -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          curl -f "http://$app_url:8787" || exit 1

      - name: Scan Docker image with Trivy
        run: |
          trivy image guilhermelinsc/rstudio-ms:${{ steps.version.outputs.tag }}

      - name: Clean up test deployment
        run: |
          kubectl delete -f deployment.yml

  gke-deploy:
    name: Deploy to GKE on Merge to Main
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up GKE credentials
        uses: google-github-actions/auth@v0.5.0
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Configure GKE
        run: |
          gcloud container clusters get-credentials my-cluster --zone us-central1-a --project my-gcp-project

      - name: Apply updated deployment
        run: |
          kubectl apply -f deployment.yml